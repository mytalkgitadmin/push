// Autogenerated from Pigeon (v2.0.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package uk.orth.push.serialization;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class PushApi {

  public enum UNAuthorizationStatus {
    notDetermined(0),
    denied(1),
    authorized(2),
    provisional(3),
    ephemeral(4);

    private int index;
    private UNAuthorizationStatus(final int index) {
      this.index = index;
    }
  }

  public enum UNAlertStyle {
    none(0),
    banner(1),
    alert(2);

    private int index;
    private UNAlertStyle(final int index) {
      this.index = index;
    }
  }

  public enum UNNotificationSetting {
    notSupported(0),
    disabled(1),
    enabled(2);

    private int index;
    private UNNotificationSetting(final int index) {
      this.index = index;
    }
  }

  public enum UNShowPreviewsSetting {
    always(0),
    whenAuthenticated(1),
    never(2);

    private int index;
    private UNShowPreviewsSetting(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class RemoteMessage {
    private @Nullable Notification notification;
    public @Nullable Notification getNotification() { return notification; }
    public void setNotification(@Nullable Notification setterArg) {
      this.notification = setterArg;
    }

    private @Nullable Map<String, Object> data;
    public @Nullable Map<String, Object> getData() { return data; }
    public void setData(@Nullable Map<String, Object> setterArg) {
      this.data = setterArg;
    }

    public static final class Builder {
      private @Nullable Notification notification;
      public @NonNull Builder setNotification(@Nullable Notification setterArg) {
        this.notification = setterArg;
        return this;
      }
      private @Nullable Map<String, Object> data;
      public @NonNull Builder setData(@Nullable Map<String, Object> setterArg) {
        this.data = setterArg;
        return this;
      }
      public @NonNull RemoteMessage build() {
        RemoteMessage pigeonReturn = new RemoteMessage();
        pigeonReturn.setNotification(notification);
        pigeonReturn.setData(data);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("notification", (notification == null) ? null : notification.toMap());
      toMapResult.put("data", data);
      return toMapResult;
    }
    static @NonNull RemoteMessage fromMap(@NonNull Map<String, Object> map) {
      RemoteMessage pigeonResult = new RemoteMessage();
      Object notification = map.get("notification");
      pigeonResult.setNotification((notification == null) ? null : Notification.fromMap((Map)notification));
      Object data = map.get("data");
      pigeonResult.setData((Map<String, Object>)data);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Notification {
    private @Nullable String title;
    public @Nullable String getTitle() { return title; }
    public void setTitle(@Nullable String setterArg) {
      this.title = setterArg;
    }

    private @Nullable String body;
    public @Nullable String getBody() { return body; }
    public void setBody(@Nullable String setterArg) {
      this.body = setterArg;
    }

    public static final class Builder {
      private @Nullable String title;
      public @NonNull Builder setTitle(@Nullable String setterArg) {
        this.title = setterArg;
        return this;
      }
      private @Nullable String body;
      public @NonNull Builder setBody(@Nullable String setterArg) {
        this.body = setterArg;
        return this;
      }
      public @NonNull Notification build() {
        Notification pigeonReturn = new Notification();
        pigeonReturn.setTitle(title);
        pigeonReturn.setBody(body);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("title", title);
      toMapResult.put("body", body);
      return toMapResult;
    }
    static @NonNull Notification fromMap(@NonNull Map<String, Object> map) {
      Notification pigeonResult = new Notification();
      Object title = map.get("title");
      pigeonResult.setTitle((String)title);
      Object body = map.get("body");
      pigeonResult.setBody((String)body);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class UNNotificationSettings {
    private @Nullable UNAuthorizationStatus authorizationStatus;
    public @Nullable UNAuthorizationStatus getAuthorizationStatus() { return authorizationStatus; }
    public void setAuthorizationStatus(@Nullable UNAuthorizationStatus setterArg) {
      this.authorizationStatus = setterArg;
    }

    private @Nullable UNNotificationSetting soundSetting;
    public @Nullable UNNotificationSetting getSoundSetting() { return soundSetting; }
    public void setSoundSetting(@Nullable UNNotificationSetting setterArg) {
      this.soundSetting = setterArg;
    }

    private @Nullable UNNotificationSetting badgeSetting;
    public @Nullable UNNotificationSetting getBadgeSetting() { return badgeSetting; }
    public void setBadgeSetting(@Nullable UNNotificationSetting setterArg) {
      this.badgeSetting = setterArg;
    }

    private @Nullable UNNotificationSetting alertSetting;
    public @Nullable UNNotificationSetting getAlertSetting() { return alertSetting; }
    public void setAlertSetting(@Nullable UNNotificationSetting setterArg) {
      this.alertSetting = setterArg;
    }

    private @Nullable UNNotificationSetting notificationCenterSetting;
    public @Nullable UNNotificationSetting getNotificationCenterSetting() { return notificationCenterSetting; }
    public void setNotificationCenterSetting(@Nullable UNNotificationSetting setterArg) {
      this.notificationCenterSetting = setterArg;
    }

    private @Nullable UNNotificationSetting lockScreenSetting;
    public @Nullable UNNotificationSetting getLockScreenSetting() { return lockScreenSetting; }
    public void setLockScreenSetting(@Nullable UNNotificationSetting setterArg) {
      this.lockScreenSetting = setterArg;
    }

    private @Nullable UNNotificationSetting carPlaySetting;
    public @Nullable UNNotificationSetting getCarPlaySetting() { return carPlaySetting; }
    public void setCarPlaySetting(@Nullable UNNotificationSetting setterArg) {
      this.carPlaySetting = setterArg;
    }

    private @Nullable UNAlertStyle alertStyle;
    public @Nullable UNAlertStyle getAlertStyle() { return alertStyle; }
    public void setAlertStyle(@Nullable UNAlertStyle setterArg) {
      this.alertStyle = setterArg;
    }

    private @Nullable UNShowPreviewsSetting showPreviewsSetting;
    public @Nullable UNShowPreviewsSetting getShowPreviewsSetting() { return showPreviewsSetting; }
    public void setShowPreviewsSetting(@Nullable UNShowPreviewsSetting setterArg) {
      this.showPreviewsSetting = setterArg;
    }

    private @Nullable UNNotificationSetting criticalAlertSetting;
    public @Nullable UNNotificationSetting getCriticalAlertSetting() { return criticalAlertSetting; }
    public void setCriticalAlertSetting(@Nullable UNNotificationSetting setterArg) {
      this.criticalAlertSetting = setterArg;
    }

    private @Nullable Boolean providesAppNotificationSettings;
    public @Nullable Boolean getProvidesAppNotificationSettings() { return providesAppNotificationSettings; }
    public void setProvidesAppNotificationSettings(@Nullable Boolean setterArg) {
      this.providesAppNotificationSettings = setterArg;
    }

    private @Nullable UNNotificationSetting announcementSetting;
    public @Nullable UNNotificationSetting getAnnouncementSetting() { return announcementSetting; }
    public void setAnnouncementSetting(@Nullable UNNotificationSetting setterArg) {
      this.announcementSetting = setterArg;
    }

    public static final class Builder {
      private @Nullable UNAuthorizationStatus authorizationStatus;
      public @NonNull Builder setAuthorizationStatus(@Nullable UNAuthorizationStatus setterArg) {
        this.authorizationStatus = setterArg;
        return this;
      }
      private @Nullable UNNotificationSetting soundSetting;
      public @NonNull Builder setSoundSetting(@Nullable UNNotificationSetting setterArg) {
        this.soundSetting = setterArg;
        return this;
      }
      private @Nullable UNNotificationSetting badgeSetting;
      public @NonNull Builder setBadgeSetting(@Nullable UNNotificationSetting setterArg) {
        this.badgeSetting = setterArg;
        return this;
      }
      private @Nullable UNNotificationSetting alertSetting;
      public @NonNull Builder setAlertSetting(@Nullable UNNotificationSetting setterArg) {
        this.alertSetting = setterArg;
        return this;
      }
      private @Nullable UNNotificationSetting notificationCenterSetting;
      public @NonNull Builder setNotificationCenterSetting(@Nullable UNNotificationSetting setterArg) {
        this.notificationCenterSetting = setterArg;
        return this;
      }
      private @Nullable UNNotificationSetting lockScreenSetting;
      public @NonNull Builder setLockScreenSetting(@Nullable UNNotificationSetting setterArg) {
        this.lockScreenSetting = setterArg;
        return this;
      }
      private @Nullable UNNotificationSetting carPlaySetting;
      public @NonNull Builder setCarPlaySetting(@Nullable UNNotificationSetting setterArg) {
        this.carPlaySetting = setterArg;
        return this;
      }
      private @Nullable UNAlertStyle alertStyle;
      public @NonNull Builder setAlertStyle(@Nullable UNAlertStyle setterArg) {
        this.alertStyle = setterArg;
        return this;
      }
      private @Nullable UNShowPreviewsSetting showPreviewsSetting;
      public @NonNull Builder setShowPreviewsSetting(@Nullable UNShowPreviewsSetting setterArg) {
        this.showPreviewsSetting = setterArg;
        return this;
      }
      private @Nullable UNNotificationSetting criticalAlertSetting;
      public @NonNull Builder setCriticalAlertSetting(@Nullable UNNotificationSetting setterArg) {
        this.criticalAlertSetting = setterArg;
        return this;
      }
      private @Nullable Boolean providesAppNotificationSettings;
      public @NonNull Builder setProvidesAppNotificationSettings(@Nullable Boolean setterArg) {
        this.providesAppNotificationSettings = setterArg;
        return this;
      }
      private @Nullable UNNotificationSetting announcementSetting;
      public @NonNull Builder setAnnouncementSetting(@Nullable UNNotificationSetting setterArg) {
        this.announcementSetting = setterArg;
        return this;
      }
      public @NonNull UNNotificationSettings build() {
        UNNotificationSettings pigeonReturn = new UNNotificationSettings();
        pigeonReturn.setAuthorizationStatus(authorizationStatus);
        pigeonReturn.setSoundSetting(soundSetting);
        pigeonReturn.setBadgeSetting(badgeSetting);
        pigeonReturn.setAlertSetting(alertSetting);
        pigeonReturn.setNotificationCenterSetting(notificationCenterSetting);
        pigeonReturn.setLockScreenSetting(lockScreenSetting);
        pigeonReturn.setCarPlaySetting(carPlaySetting);
        pigeonReturn.setAlertStyle(alertStyle);
        pigeonReturn.setShowPreviewsSetting(showPreviewsSetting);
        pigeonReturn.setCriticalAlertSetting(criticalAlertSetting);
        pigeonReturn.setProvidesAppNotificationSettings(providesAppNotificationSettings);
        pigeonReturn.setAnnouncementSetting(announcementSetting);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("authorizationStatus", authorizationStatus == null ? null : authorizationStatus.index);
      toMapResult.put("soundSetting", soundSetting == null ? null : soundSetting.index);
      toMapResult.put("badgeSetting", badgeSetting == null ? null : badgeSetting.index);
      toMapResult.put("alertSetting", alertSetting == null ? null : alertSetting.index);
      toMapResult.put("notificationCenterSetting", notificationCenterSetting == null ? null : notificationCenterSetting.index);
      toMapResult.put("lockScreenSetting", lockScreenSetting == null ? null : lockScreenSetting.index);
      toMapResult.put("carPlaySetting", carPlaySetting == null ? null : carPlaySetting.index);
      toMapResult.put("alertStyle", alertStyle == null ? null : alertStyle.index);
      toMapResult.put("showPreviewsSetting", showPreviewsSetting == null ? null : showPreviewsSetting.index);
      toMapResult.put("criticalAlertSetting", criticalAlertSetting == null ? null : criticalAlertSetting.index);
      toMapResult.put("providesAppNotificationSettings", providesAppNotificationSettings);
      toMapResult.put("announcementSetting", announcementSetting == null ? null : announcementSetting.index);
      return toMapResult;
    }
    static @NonNull UNNotificationSettings fromMap(@NonNull Map<String, Object> map) {
      UNNotificationSettings pigeonResult = new UNNotificationSettings();
      Object authorizationStatus = map.get("authorizationStatus");
      pigeonResult.setAuthorizationStatus(authorizationStatus == null ? null : UNAuthorizationStatus.values()[(int)authorizationStatus]);
      Object soundSetting = map.get("soundSetting");
      pigeonResult.setSoundSetting(soundSetting == null ? null : UNNotificationSetting.values()[(int)soundSetting]);
      Object badgeSetting = map.get("badgeSetting");
      pigeonResult.setBadgeSetting(badgeSetting == null ? null : UNNotificationSetting.values()[(int)badgeSetting]);
      Object alertSetting = map.get("alertSetting");
      pigeonResult.setAlertSetting(alertSetting == null ? null : UNNotificationSetting.values()[(int)alertSetting]);
      Object notificationCenterSetting = map.get("notificationCenterSetting");
      pigeonResult.setNotificationCenterSetting(notificationCenterSetting == null ? null : UNNotificationSetting.values()[(int)notificationCenterSetting]);
      Object lockScreenSetting = map.get("lockScreenSetting");
      pigeonResult.setLockScreenSetting(lockScreenSetting == null ? null : UNNotificationSetting.values()[(int)lockScreenSetting]);
      Object carPlaySetting = map.get("carPlaySetting");
      pigeonResult.setCarPlaySetting(carPlaySetting == null ? null : UNNotificationSetting.values()[(int)carPlaySetting]);
      Object alertStyle = map.get("alertStyle");
      pigeonResult.setAlertStyle(alertStyle == null ? null : UNAlertStyle.values()[(int)alertStyle]);
      Object showPreviewsSetting = map.get("showPreviewsSetting");
      pigeonResult.setShowPreviewsSetting(showPreviewsSetting == null ? null : UNShowPreviewsSetting.values()[(int)showPreviewsSetting]);
      Object criticalAlertSetting = map.get("criticalAlertSetting");
      pigeonResult.setCriticalAlertSetting(criticalAlertSetting == null ? null : UNNotificationSetting.values()[(int)criticalAlertSetting]);
      Object providesAppNotificationSettings = map.get("providesAppNotificationSettings");
      pigeonResult.setProvidesAppNotificationSettings((Boolean)providesAppNotificationSettings);
      Object announcementSetting = map.get("announcementSetting");
      pigeonResult.setAnnouncementSetting(announcementSetting == null ? null : UNNotificationSetting.values()[(int)announcementSetting]);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class PushHostApiCodec extends StandardMessageCodec {
    public static final PushHostApiCodec INSTANCE = new PushHostApiCodec();
    private PushHostApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return Notification.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return RemoteMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return UNNotificationSettings.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof Notification) {
        stream.write(128);
        writeValue(stream, ((Notification) value).toMap());
      } else 
      if (value instanceof RemoteMessage) {
        stream.write(129);
        writeValue(stream, ((RemoteMessage) value).toMap());
      } else 
      if (value instanceof UNNotificationSettings) {
        stream.write(130);
        writeValue(stream, ((UNNotificationSettings) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface PushHostApi {
    @Nullable Map<String, Object> getNotificationTapWhichLaunchedTerminatedApp();
    void getToken(Result<String> result);
    void backgroundFlutterApplicationReady();
    void onListenToOnNewToken();
    void onCancelToOnNewToken();
    void requestPermission(@NonNull Boolean badge, @NonNull Boolean sound, @NonNull Boolean alert, @NonNull Boolean carPlay, @NonNull Boolean criticalAlert, @NonNull Boolean provisional, @NonNull Boolean providesAppNotificationSettings, @NonNull Boolean announcement, Result<Boolean> result);
    void getNotificationSettings(Result<UNNotificationSettings> result);

    /** The codec used by PushHostApi. */
    static MessageCodec<Object> getCodec() {
      return PushHostApiCodec.INSTANCE;
    }

    /** Sets up an instance of `PushHostApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, PushHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PushHostApi.getNotificationTapWhichLaunchedTerminatedApp", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Map<String, Object> output = api.getNotificationTapWhichLaunchedTerminatedApp();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PushHostApi.getToken", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<String> resultCallback = new Result<String>() {
                public void success(String result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getToken(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PushHostApi.backgroundFlutterApplicationReady", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.backgroundFlutterApplicationReady();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PushHostApi.onListenToOnNewToken", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.onListenToOnNewToken();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PushHostApi.onCancelToOnNewToken", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.onCancelToOnNewToken();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PushHostApi.requestPermission", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Boolean badgeArg = (Boolean)args.get(0);
              if (badgeArg == null) {
                throw new NullPointerException("badgeArg unexpectedly null.");
              }
              Boolean soundArg = (Boolean)args.get(1);
              if (soundArg == null) {
                throw new NullPointerException("soundArg unexpectedly null.");
              }
              Boolean alertArg = (Boolean)args.get(2);
              if (alertArg == null) {
                throw new NullPointerException("alertArg unexpectedly null.");
              }
              Boolean carPlayArg = (Boolean)args.get(3);
              if (carPlayArg == null) {
                throw new NullPointerException("carPlayArg unexpectedly null.");
              }
              Boolean criticalAlertArg = (Boolean)args.get(4);
              if (criticalAlertArg == null) {
                throw new NullPointerException("criticalAlertArg unexpectedly null.");
              }
              Boolean provisionalArg = (Boolean)args.get(5);
              if (provisionalArg == null) {
                throw new NullPointerException("provisionalArg unexpectedly null.");
              }
              Boolean providesAppNotificationSettingsArg = (Boolean)args.get(6);
              if (providesAppNotificationSettingsArg == null) {
                throw new NullPointerException("providesAppNotificationSettingsArg unexpectedly null.");
              }
              Boolean announcementArg = (Boolean)args.get(7);
              if (announcementArg == null) {
                throw new NullPointerException("announcementArg unexpectedly null.");
              }
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.requestPermission(badgeArg, soundArg, alertArg, carPlayArg, criticalAlertArg, provisionalArg, providesAppNotificationSettingsArg, announcementArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PushHostApi.getNotificationSettings", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<UNNotificationSettings> resultCallback = new Result<UNNotificationSettings>() {
                public void success(UNNotificationSettings result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getNotificationSettings(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class PushFlutterApiCodec extends StandardMessageCodec {
    public static final PushFlutterApiCodec INSTANCE = new PushFlutterApiCodec();
    private PushFlutterApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return Notification.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return RemoteMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return UNNotificationSettings.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof Notification) {
        stream.write(128);
        writeValue(stream, ((Notification) value).toMap());
      } else 
      if (value instanceof RemoteMessage) {
        stream.write(129);
        writeValue(stream, ((RemoteMessage) value).toMap());
      } else 
      if (value instanceof UNNotificationSettings) {
        stream.write(130);
        writeValue(stream, ((UNNotificationSettings) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class PushFlutterApi {
    private final BinaryMessenger binaryMessenger;
    public PushFlutterApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return PushFlutterApiCodec.INSTANCE;
    }

    public void onMessage(@NonNull RemoteMessage messageArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PushFlutterApi.onMessage", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(messageArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onBackgroundMessage(@NonNull RemoteMessage messageArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PushFlutterApi.onBackgroundMessage", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(messageArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onNotificationTap(@NonNull Map<String, Object> dataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PushFlutterApi.onNotificationTap", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(dataArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onNewToken(@NonNull String tokenArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PushFlutterApi.onNewToken", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(tokenArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onOpenNotificationSettings(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PushFlutterApi.onOpenNotificationSettings", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void showNotificationInForeground(@NonNull RemoteMessage messageArg, Reply<Boolean> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PushFlutterApi.showNotificationInForeground", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(messageArg)), channelReply -> {
        @SuppressWarnings("ConstantConditions")
        Boolean output = (Boolean)channelReply;
        callback.reply(output);
      });
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
