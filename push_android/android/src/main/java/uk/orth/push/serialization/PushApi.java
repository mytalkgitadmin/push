// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package uk.orth.push.serialization;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class PushApi {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /**
   * # iOS UN (UserNotification) symbols
   *
   * Dart/Flutter translation of the iOS permissions API. In a future release,
   * we may replace this API with a consistent API for all platforms that require
   * permissions to show notifications to the user.
   * UNAuthorizationStatus: Constants indicating whether the app is allowed to
   * schedule notifications.
   *
   * See the [Apple documentation](https://developer.apple.com/documentation/usernotifications/unnotificationsettings/1648391-authorizationstatus) for more information
   */
  public enum UNAuthorizationStatus {
    NOT_DETERMINED(0),
    DENIED(1),
    AUTHORIZED(2),
    PROVISIONAL(3),
    EPHEMERAL(4);

    final int index;

    private UNAuthorizationStatus(final int index) {
      this.index = index;
    }
  }

  /**
   * The type of notification the user will see
   *
   * See the [Apple documentation](https://developer.apple.com/documentation/usernotifications/unalertstyle) for more information
   */
  public enum UNAlertStyle {
    NONE(0),
    BANNER(1),
    ALERT(2);

    final int index;

    private UNAlertStyle(final int index) {
      this.index = index;
    }
  }

  /**
   * The current configuration of a notification setting
   *
   * See the [Apple documentation](https://developer.apple.com/documentation/usernotifications/unnotificationsetting) for more information
   */
  public enum UNNotificationSetting {
    NOT_SUPPORTED(0),
    DISABLED(1),
    ENABLED(2);

    final int index;

    private UNNotificationSetting(final int index) {
      this.index = index;
    }
  }

  /**
   * Conditions to show/reveal notification content to the user
   *
   * See the [Apple documentation](https://developer.apple.com/documentation/usernotifications/unshowpreviewssetting) for more information
   */
  public enum UNShowPreviewsSetting {
    ALWAYS(0),
    WHEN_AUTHENTICATED(1),
    NEVER(2);

    final int index;

    private UNShowPreviewsSetting(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class RemoteMessage {
    private @Nullable Notification notification;

    public @Nullable Notification getNotification() {
      return notification;
    }

    public void setNotification(@Nullable Notification setterArg) {
      this.notification = setterArg;
    }

    private @Nullable Map<String, Object> data;

    public @Nullable Map<String, Object> getData() {
      return data;
    }

    public void setData(@Nullable Map<String, Object> setterArg) {
      this.data = setterArg;
    }

    public static final class Builder {

      private @Nullable Notification notification;

      public @NonNull Builder setNotification(@Nullable Notification setterArg) {
        this.notification = setterArg;
        return this;
      }

      private @Nullable Map<String, Object> data;

      public @NonNull Builder setData(@Nullable Map<String, Object> setterArg) {
        this.data = setterArg;
        return this;
      }

      public @NonNull RemoteMessage build() {
        RemoteMessage pigeonReturn = new RemoteMessage();
        pigeonReturn.setNotification(notification);
        pigeonReturn.setData(data);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add((notification == null) ? null : notification.toList());
      toListResult.add(data);
      return toListResult;
    }

    static @NonNull RemoteMessage fromList(@NonNull ArrayList<Object> list) {
      RemoteMessage pigeonResult = new RemoteMessage();
      Object notification = list.get(0);
      pigeonResult.setNotification((notification == null) ? null : Notification.fromList((ArrayList<Object>) notification));
      Object data = list.get(1);
      pigeonResult.setData((Map<String, Object>) data);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class Notification {
    private @Nullable String title;

    public @Nullable String getTitle() {
      return title;
    }

    public void setTitle(@Nullable String setterArg) {
      this.title = setterArg;
    }

    private @Nullable String body;

    public @Nullable String getBody() {
      return body;
    }

    public void setBody(@Nullable String setterArg) {
      this.body = setterArg;
    }

    public static final class Builder {

      private @Nullable String title;

      public @NonNull Builder setTitle(@Nullable String setterArg) {
        this.title = setterArg;
        return this;
      }

      private @Nullable String body;

      public @NonNull Builder setBody(@Nullable String setterArg) {
        this.body = setterArg;
        return this;
      }

      public @NonNull Notification build() {
        Notification pigeonReturn = new Notification();
        pigeonReturn.setTitle(title);
        pigeonReturn.setBody(body);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(title);
      toListResult.add(body);
      return toListResult;
    }

    static @NonNull Notification fromList(@NonNull ArrayList<Object> list) {
      Notification pigeonResult = new Notification();
      Object title = list.get(0);
      pigeonResult.setTitle((String) title);
      Object body = list.get(1);
      pigeonResult.setBody((String) body);
      return pigeonResult;
    }
  }

  /**
   * The object for reading notification-related settings and the authorization status of your app.
   *
   * See the [Apple documentation](https://developer.apple.com/documentation/usernotifications/unnotificationsettings) for more information
   *
   * Generated class from Pigeon that represents data sent in messages.
   */
  public static final class UNNotificationSettings {
    private @Nullable UNAuthorizationStatus authorizationStatus;

    public @Nullable UNAuthorizationStatus getAuthorizationStatus() {
      return authorizationStatus;
    }

    public void setAuthorizationStatus(@Nullable UNAuthorizationStatus setterArg) {
      this.authorizationStatus = setterArg;
    }

    private @Nullable UNNotificationSetting soundSetting;

    public @Nullable UNNotificationSetting getSoundSetting() {
      return soundSetting;
    }

    public void setSoundSetting(@Nullable UNNotificationSetting setterArg) {
      this.soundSetting = setterArg;
    }

    private @Nullable UNNotificationSetting badgeSetting;

    public @Nullable UNNotificationSetting getBadgeSetting() {
      return badgeSetting;
    }

    public void setBadgeSetting(@Nullable UNNotificationSetting setterArg) {
      this.badgeSetting = setterArg;
    }

    private @Nullable UNNotificationSetting alertSetting;

    public @Nullable UNNotificationSetting getAlertSetting() {
      return alertSetting;
    }

    public void setAlertSetting(@Nullable UNNotificationSetting setterArg) {
      this.alertSetting = setterArg;
    }

    private @Nullable UNNotificationSetting notificationCenterSetting;

    public @Nullable UNNotificationSetting getNotificationCenterSetting() {
      return notificationCenterSetting;
    }

    public void setNotificationCenterSetting(@Nullable UNNotificationSetting setterArg) {
      this.notificationCenterSetting = setterArg;
    }

    private @Nullable UNNotificationSetting lockScreenSetting;

    public @Nullable UNNotificationSetting getLockScreenSetting() {
      return lockScreenSetting;
    }

    public void setLockScreenSetting(@Nullable UNNotificationSetting setterArg) {
      this.lockScreenSetting = setterArg;
    }

    private @Nullable UNNotificationSetting carPlaySetting;

    public @Nullable UNNotificationSetting getCarPlaySetting() {
      return carPlaySetting;
    }

    public void setCarPlaySetting(@Nullable UNNotificationSetting setterArg) {
      this.carPlaySetting = setterArg;
    }

    private @Nullable UNAlertStyle alertStyle;

    public @Nullable UNAlertStyle getAlertStyle() {
      return alertStyle;
    }

    public void setAlertStyle(@Nullable UNAlertStyle setterArg) {
      this.alertStyle = setterArg;
    }

    private @Nullable UNShowPreviewsSetting showPreviewsSetting;

    public @Nullable UNShowPreviewsSetting getShowPreviewsSetting() {
      return showPreviewsSetting;
    }

    public void setShowPreviewsSetting(@Nullable UNShowPreviewsSetting setterArg) {
      this.showPreviewsSetting = setterArg;
    }

    private @Nullable UNNotificationSetting criticalAlertSetting;

    public @Nullable UNNotificationSetting getCriticalAlertSetting() {
      return criticalAlertSetting;
    }

    public void setCriticalAlertSetting(@Nullable UNNotificationSetting setterArg) {
      this.criticalAlertSetting = setterArg;
    }

    private @Nullable Boolean providesAppNotificationSettings;

    public @Nullable Boolean getProvidesAppNotificationSettings() {
      return providesAppNotificationSettings;
    }

    public void setProvidesAppNotificationSettings(@Nullable Boolean setterArg) {
      this.providesAppNotificationSettings = setterArg;
    }

    private @Nullable UNNotificationSetting announcementSetting;

    public @Nullable UNNotificationSetting getAnnouncementSetting() {
      return announcementSetting;
    }

    public void setAnnouncementSetting(@Nullable UNNotificationSetting setterArg) {
      this.announcementSetting = setterArg;
    }

    public static final class Builder {

      private @Nullable UNAuthorizationStatus authorizationStatus;

      public @NonNull Builder setAuthorizationStatus(@Nullable UNAuthorizationStatus setterArg) {
        this.authorizationStatus = setterArg;
        return this;
      }

      private @Nullable UNNotificationSetting soundSetting;

      public @NonNull Builder setSoundSetting(@Nullable UNNotificationSetting setterArg) {
        this.soundSetting = setterArg;
        return this;
      }

      private @Nullable UNNotificationSetting badgeSetting;

      public @NonNull Builder setBadgeSetting(@Nullable UNNotificationSetting setterArg) {
        this.badgeSetting = setterArg;
        return this;
      }

      private @Nullable UNNotificationSetting alertSetting;

      public @NonNull Builder setAlertSetting(@Nullable UNNotificationSetting setterArg) {
        this.alertSetting = setterArg;
        return this;
      }

      private @Nullable UNNotificationSetting notificationCenterSetting;

      public @NonNull Builder setNotificationCenterSetting(@Nullable UNNotificationSetting setterArg) {
        this.notificationCenterSetting = setterArg;
        return this;
      }

      private @Nullable UNNotificationSetting lockScreenSetting;

      public @NonNull Builder setLockScreenSetting(@Nullable UNNotificationSetting setterArg) {
        this.lockScreenSetting = setterArg;
        return this;
      }

      private @Nullable UNNotificationSetting carPlaySetting;

      public @NonNull Builder setCarPlaySetting(@Nullable UNNotificationSetting setterArg) {
        this.carPlaySetting = setterArg;
        return this;
      }

      private @Nullable UNAlertStyle alertStyle;

      public @NonNull Builder setAlertStyle(@Nullable UNAlertStyle setterArg) {
        this.alertStyle = setterArg;
        return this;
      }

      private @Nullable UNShowPreviewsSetting showPreviewsSetting;

      public @NonNull Builder setShowPreviewsSetting(@Nullable UNShowPreviewsSetting setterArg) {
        this.showPreviewsSetting = setterArg;
        return this;
      }

      private @Nullable UNNotificationSetting criticalAlertSetting;

      public @NonNull Builder setCriticalAlertSetting(@Nullable UNNotificationSetting setterArg) {
        this.criticalAlertSetting = setterArg;
        return this;
      }

      private @Nullable Boolean providesAppNotificationSettings;

      public @NonNull Builder setProvidesAppNotificationSettings(@Nullable Boolean setterArg) {
        this.providesAppNotificationSettings = setterArg;
        return this;
      }

      private @Nullable UNNotificationSetting announcementSetting;

      public @NonNull Builder setAnnouncementSetting(@Nullable UNNotificationSetting setterArg) {
        this.announcementSetting = setterArg;
        return this;
      }

      public @NonNull UNNotificationSettings build() {
        UNNotificationSettings pigeonReturn = new UNNotificationSettings();
        pigeonReturn.setAuthorizationStatus(authorizationStatus);
        pigeonReturn.setSoundSetting(soundSetting);
        pigeonReturn.setBadgeSetting(badgeSetting);
        pigeonReturn.setAlertSetting(alertSetting);
        pigeonReturn.setNotificationCenterSetting(notificationCenterSetting);
        pigeonReturn.setLockScreenSetting(lockScreenSetting);
        pigeonReturn.setCarPlaySetting(carPlaySetting);
        pigeonReturn.setAlertStyle(alertStyle);
        pigeonReturn.setShowPreviewsSetting(showPreviewsSetting);
        pigeonReturn.setCriticalAlertSetting(criticalAlertSetting);
        pigeonReturn.setProvidesAppNotificationSettings(providesAppNotificationSettings);
        pigeonReturn.setAnnouncementSetting(announcementSetting);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(12);
      toListResult.add(authorizationStatus == null ? null : authorizationStatus.index);
      toListResult.add(soundSetting == null ? null : soundSetting.index);
      toListResult.add(badgeSetting == null ? null : badgeSetting.index);
      toListResult.add(alertSetting == null ? null : alertSetting.index);
      toListResult.add(notificationCenterSetting == null ? null : notificationCenterSetting.index);
      toListResult.add(lockScreenSetting == null ? null : lockScreenSetting.index);
      toListResult.add(carPlaySetting == null ? null : carPlaySetting.index);
      toListResult.add(alertStyle == null ? null : alertStyle.index);
      toListResult.add(showPreviewsSetting == null ? null : showPreviewsSetting.index);
      toListResult.add(criticalAlertSetting == null ? null : criticalAlertSetting.index);
      toListResult.add(providesAppNotificationSettings);
      toListResult.add(announcementSetting == null ? null : announcementSetting.index);
      return toListResult;
    }

    static @NonNull UNNotificationSettings fromList(@NonNull ArrayList<Object> list) {
      UNNotificationSettings pigeonResult = new UNNotificationSettings();
      Object authorizationStatus = list.get(0);
      pigeonResult.setAuthorizationStatus(authorizationStatus == null ? null : UNAuthorizationStatus.values()[(int) authorizationStatus]);
      Object soundSetting = list.get(1);
      pigeonResult.setSoundSetting(soundSetting == null ? null : UNNotificationSetting.values()[(int) soundSetting]);
      Object badgeSetting = list.get(2);
      pigeonResult.setBadgeSetting(badgeSetting == null ? null : UNNotificationSetting.values()[(int) badgeSetting]);
      Object alertSetting = list.get(3);
      pigeonResult.setAlertSetting(alertSetting == null ? null : UNNotificationSetting.values()[(int) alertSetting]);
      Object notificationCenterSetting = list.get(4);
      pigeonResult.setNotificationCenterSetting(notificationCenterSetting == null ? null : UNNotificationSetting.values()[(int) notificationCenterSetting]);
      Object lockScreenSetting = list.get(5);
      pigeonResult.setLockScreenSetting(lockScreenSetting == null ? null : UNNotificationSetting.values()[(int) lockScreenSetting]);
      Object carPlaySetting = list.get(6);
      pigeonResult.setCarPlaySetting(carPlaySetting == null ? null : UNNotificationSetting.values()[(int) carPlaySetting]);
      Object alertStyle = list.get(7);
      pigeonResult.setAlertStyle(alertStyle == null ? null : UNAlertStyle.values()[(int) alertStyle]);
      Object showPreviewsSetting = list.get(8);
      pigeonResult.setShowPreviewsSetting(showPreviewsSetting == null ? null : UNShowPreviewsSetting.values()[(int) showPreviewsSetting]);
      Object criticalAlertSetting = list.get(9);
      pigeonResult.setCriticalAlertSetting(criticalAlertSetting == null ? null : UNNotificationSetting.values()[(int) criticalAlertSetting]);
      Object providesAppNotificationSettings = list.get(10);
      pigeonResult.setProvidesAppNotificationSettings((Boolean) providesAppNotificationSettings);
      Object announcementSetting = list.get(11);
      pigeonResult.setAnnouncementSetting(announcementSetting == null ? null : UNNotificationSetting.values()[(int) announcementSetting]);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    @SuppressWarnings("UnknownNullness")
    void success(T result);

    void error(@NonNull Throwable error);
  }

  private static class PushHostApiCodec extends StandardMessageCodec {
    public static final PushHostApiCodec INSTANCE = new PushHostApiCodec();

    private PushHostApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return Notification.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return RemoteMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return UNNotificationSettings.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof Notification) {
        stream.write(128);
        writeValue(stream, ((Notification) value).toList());
      } else if (value instanceof RemoteMessage) {
        stream.write(129);
        writeValue(stream, ((RemoteMessage) value).toList());
      } else if (value instanceof UNNotificationSettings) {
        stream.write(130);
        writeValue(stream, ((UNNotificationSettings) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface PushHostApi {
    /**
     * Returns null if it doesn't exist.
     * See [PushFlutterApi.onNotificationTap] to understand why a RemoteMessage is not provided here.
     */
    @Nullable 
    Map<String, Object> getNotificationTapWhichLaunchedTerminatedApp();

    void getToken(@NonNull Result<String> result);

    void backgroundFlutterApplicationReady();

    void onListenToOnNewToken();

    void onCancelToOnNewToken();
    /**
     * Pass true for the option you want permission to use
     * Returns true if permission was granted.
     */
    void requestPermission(@NonNull Boolean badge, @NonNull Boolean sound, @NonNull Boolean alert, @NonNull Boolean carPlay, @NonNull Boolean criticalAlert, @NonNull Boolean provisional, @NonNull Boolean providesAppNotificationSettings, @NonNull Boolean announcement, @NonNull Result<Boolean> result);

    void getNotificationSettings(@NonNull Result<UNNotificationSettings> result);

    void areNotificationsEnabled(@NonNull Result<Boolean> result);

    /** The codec used by PushHostApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PushHostApiCodec.INSTANCE;
    }
    /**Sets up an instance of `PushHostApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable PushHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PushHostApi.getNotificationTapWhichLaunchedTerminatedApp", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Map<String, Object> output = api.getNotificationTapWhichLaunchedTerminatedApp();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PushHostApi.getToken", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<String> resultCallback =
                    new Result<String>() {
                      public void success(String result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getToken(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PushHostApi.backgroundFlutterApplicationReady", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.backgroundFlutterApplicationReady();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PushHostApi.onListenToOnNewToken", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.onListenToOnNewToken();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PushHostApi.onCancelToOnNewToken", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.onCancelToOnNewToken();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PushHostApi.requestPermission", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Boolean badgeArg = (Boolean) args.get(0);
                Boolean soundArg = (Boolean) args.get(1);
                Boolean alertArg = (Boolean) args.get(2);
                Boolean carPlayArg = (Boolean) args.get(3);
                Boolean criticalAlertArg = (Boolean) args.get(4);
                Boolean provisionalArg = (Boolean) args.get(5);
                Boolean providesAppNotificationSettingsArg = (Boolean) args.get(6);
                Boolean announcementArg = (Boolean) args.get(7);
                Result<Boolean> resultCallback =
                    new Result<Boolean>() {
                      public void success(Boolean result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.requestPermission(badgeArg, soundArg, alertArg, carPlayArg, criticalAlertArg, provisionalArg, providesAppNotificationSettingsArg, announcementArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PushHostApi.getNotificationSettings", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<UNNotificationSettings> resultCallback =
                    new Result<UNNotificationSettings>() {
                      public void success(UNNotificationSettings result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getNotificationSettings(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PushHostApi.areNotificationsEnabled", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Boolean> resultCallback =
                    new Result<Boolean>() {
                      public void success(Boolean result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.areNotificationsEnabled(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class PushFlutterApiCodec extends StandardMessageCodec {
    public static final PushFlutterApiCodec INSTANCE = new PushFlutterApiCodec();

    private PushFlutterApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return Notification.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return RemoteMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return UNNotificationSettings.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof Notification) {
        stream.write(128);
        writeValue(stream, ((Notification) value).toList());
      } else if (value instanceof RemoteMessage) {
        stream.write(129);
        writeValue(stream, ((RemoteMessage) value).toList());
      } else if (value instanceof UNNotificationSettings) {
        stream.write(130);
        writeValue(stream, ((UNNotificationSettings) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class PushFlutterApi {
    private final @NonNull BinaryMessenger binaryMessenger;

    public PushFlutterApi(@NonNull BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */ 
    @SuppressWarnings("UnknownNullness")
    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by PushFlutterApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PushFlutterApiCodec.INSTANCE;
    }
    public void onMessage(@NonNull RemoteMessage messageArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.PushFlutterApi.onMessage", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(messageArg)),
          channelReply -> callback.reply(null));
    }
    public void onBackgroundMessage(@NonNull RemoteMessage messageArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.PushFlutterApi.onBackgroundMessage", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(messageArg)),
          channelReply -> callback.reply(null));
    }
    /**
     * Unfortunately, the intent provided to the app when a user taps on a
     * notification does not include notification's title or body.
     * In this instance, it makes more sense to remove this useful functionality from iOS too.
     * Only the data property on the RemoteMessage is returned to the user.
     * This is effectively the lowest common denominator API.
     *
     * Hint: You can still include the title, body or other metadata in your
     * data payload to identify what notification the user tapped on.
     */
    public void onNotificationTap(@NonNull Map<String, Object> dataArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.PushFlutterApi.onNotificationTap", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(dataArg)),
          channelReply -> callback.reply(null));
    }
    public void onNewToken(@NonNull String tokenArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.PushFlutterApi.onNewToken", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(tokenArg)),
          channelReply -> callback.reply(null));
    }
    public void onOpenNotificationSettings(@NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.PushFlutterApi.onOpenNotificationSettings", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
  }
}
