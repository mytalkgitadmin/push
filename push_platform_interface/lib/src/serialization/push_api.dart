// Autogenerated from Pigeon (v2.0.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';

enum UNAuthorizationStatus {
  notDetermined,
  denied,
  authorized,
  provisional,
  ephemeral,
}

enum UNAlertStyle {
  none,
  banner,
  alert,
}

enum UNNotificationSetting {
  notSupported,
  disabled,
  enabled,
}

enum UNShowPreviewsSetting {
  always,
  whenAuthenticated,
  never,
}

class RemoteMessage {
  RemoteMessage({
    this.notification,
    this.data,
  });

  Notification? notification;
  Map<String?, Object?>? data;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['notification'] = notification == null ? null : notification!.encode();
    pigeonMap['data'] = data;
    return pigeonMap;
  }

  static RemoteMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return RemoteMessage(
      notification: pigeonMap['notification'] != null
          ? Notification.decode(pigeonMap['notification']!)
          : null,
      data: (pigeonMap['data'] as Map<Object?, Object?>?)?.cast<String?, Object?>(),
    );
  }
}

class Notification {
  Notification({
    this.title,
    this.body,
  });

  String? title;
  String? body;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['title'] = title;
    pigeonMap['body'] = body;
    return pigeonMap;
  }

  static Notification decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return Notification(
      title: pigeonMap['title'] as String?,
      body: pigeonMap['body'] as String?,
    );
  }
}

class UNNotificationSettings {
  UNNotificationSettings({
    this.authorizationStatus,
    this.soundSetting,
    this.badgeSetting,
    this.alertSetting,
    this.notificationCenterSetting,
    this.lockScreenSetting,
    this.carPlaySetting,
    this.alertStyle,
    this.showPreviewsSetting,
    this.criticalAlertSetting,
    this.providesAppNotificationSettings,
    this.announcementSetting,
  });

  UNAuthorizationStatus? authorizationStatus;
  UNNotificationSetting? soundSetting;
  UNNotificationSetting? badgeSetting;
  UNNotificationSetting? alertSetting;
  UNNotificationSetting? notificationCenterSetting;
  UNNotificationSetting? lockScreenSetting;
  UNNotificationSetting? carPlaySetting;
  UNAlertStyle? alertStyle;
  UNShowPreviewsSetting? showPreviewsSetting;
  UNNotificationSetting? criticalAlertSetting;
  bool? providesAppNotificationSettings;
  UNNotificationSetting? announcementSetting;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['authorizationStatus'] = authorizationStatus == null ? null : authorizationStatus!.index;
    pigeonMap['soundSetting'] = soundSetting == null ? null : soundSetting!.index;
    pigeonMap['badgeSetting'] = badgeSetting == null ? null : badgeSetting!.index;
    pigeonMap['alertSetting'] = alertSetting == null ? null : alertSetting!.index;
    pigeonMap['notificationCenterSetting'] = notificationCenterSetting == null ? null : notificationCenterSetting!.index;
    pigeonMap['lockScreenSetting'] = lockScreenSetting == null ? null : lockScreenSetting!.index;
    pigeonMap['carPlaySetting'] = carPlaySetting == null ? null : carPlaySetting!.index;
    pigeonMap['alertStyle'] = alertStyle == null ? null : alertStyle!.index;
    pigeonMap['showPreviewsSetting'] = showPreviewsSetting == null ? null : showPreviewsSetting!.index;
    pigeonMap['criticalAlertSetting'] = criticalAlertSetting == null ? null : criticalAlertSetting!.index;
    pigeonMap['providesAppNotificationSettings'] = providesAppNotificationSettings;
    pigeonMap['announcementSetting'] = announcementSetting == null ? null : announcementSetting!.index;
    return pigeonMap;
  }

  static UNNotificationSettings decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return UNNotificationSettings(
      authorizationStatus: pigeonMap['authorizationStatus'] != null
          ? UNAuthorizationStatus.values[pigeonMap['authorizationStatus']! as int]
          : null,
      soundSetting: pigeonMap['soundSetting'] != null
          ? UNNotificationSetting.values[pigeonMap['soundSetting']! as int]
          : null,
      badgeSetting: pigeonMap['badgeSetting'] != null
          ? UNNotificationSetting.values[pigeonMap['badgeSetting']! as int]
          : null,
      alertSetting: pigeonMap['alertSetting'] != null
          ? UNNotificationSetting.values[pigeonMap['alertSetting']! as int]
          : null,
      notificationCenterSetting: pigeonMap['notificationCenterSetting'] != null
          ? UNNotificationSetting.values[pigeonMap['notificationCenterSetting']! as int]
          : null,
      lockScreenSetting: pigeonMap['lockScreenSetting'] != null
          ? UNNotificationSetting.values[pigeonMap['lockScreenSetting']! as int]
          : null,
      carPlaySetting: pigeonMap['carPlaySetting'] != null
          ? UNNotificationSetting.values[pigeonMap['carPlaySetting']! as int]
          : null,
      alertStyle: pigeonMap['alertStyle'] != null
          ? UNAlertStyle.values[pigeonMap['alertStyle']! as int]
          : null,
      showPreviewsSetting: pigeonMap['showPreviewsSetting'] != null
          ? UNShowPreviewsSetting.values[pigeonMap['showPreviewsSetting']! as int]
          : null,
      criticalAlertSetting: pigeonMap['criticalAlertSetting'] != null
          ? UNNotificationSetting.values[pigeonMap['criticalAlertSetting']! as int]
          : null,
      providesAppNotificationSettings: pigeonMap['providesAppNotificationSettings'] as bool?,
      announcementSetting: pigeonMap['announcementSetting'] != null
          ? UNNotificationSetting.values[pigeonMap['announcementSetting']! as int]
          : null,
    );
  }
}

class _PushHostApiCodec extends StandardMessageCodec {
  const _PushHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is Notification) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is RemoteMessage) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
    if (value is UNNotificationSettings) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return Notification.decode(readValue(buffer)!);
      
      case 129:       
        return RemoteMessage.decode(readValue(buffer)!);
      
      case 130:       
        return UNNotificationSettings.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

class PushHostApi {
  /// Constructor for [PushHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PushHostApi({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _PushHostApiCodec();

  Future<Map<String?, Object?>?> getNotificationTapWhichLaunchedTerminatedApp() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PushHostApi.getNotificationTapWhichLaunchedTerminatedApp', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return (replyMap['result'] as Map<Object?, Object?>?)?.cast<String?, Object?>();
    }
  }

  Future<String> getToken() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PushHostApi.getToken', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as String?)!;
    }
  }

  Future<void> backgroundFlutterApplicationReady() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PushHostApi.backgroundFlutterApplicationReady', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> onListenToOnNewToken() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PushHostApi.onListenToOnNewToken', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> onCancelToOnNewToken() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PushHostApi.onCancelToOnNewToken', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<bool> requestPermission(bool arg_badge, bool arg_sound, bool arg_alert, bool arg_carPlay, bool arg_criticalAlert, bool arg_provisional, bool arg_providesAppNotificationSettings, bool arg_announcement) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PushHostApi.requestPermission', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_badge, arg_sound, arg_alert, arg_carPlay, arg_criticalAlert, arg_provisional, arg_providesAppNotificationSettings, arg_announcement]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as bool?)!;
    }
  }

  Future<UNNotificationSettings> getNotificationSettings() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PushHostApi.getNotificationSettings', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as UNNotificationSettings?)!;
    }
  }
}

class _PushFlutterApiCodec extends StandardMessageCodec {
  const _PushFlutterApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is Notification) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is RemoteMessage) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
    if (value is UNNotificationSettings) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return Notification.decode(readValue(buffer)!);
      
      case 129:       
        return RemoteMessage.decode(readValue(buffer)!);
      
      case 130:       
        return UNNotificationSettings.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}
abstract class PushFlutterApi {
  static const MessageCodec<Object?> codec = _PushFlutterApiCodec();

  void onMessage(RemoteMessage message);
  void onBackgroundMessage(RemoteMessage message);
  void onNotificationTap(Map<String?, Object?> data);
  void onNewToken(String token);
  void onOpenNotificationSettings();
  Future<bool> showNotificationInForeground(RemoteMessage message);
  static void setup(PushFlutterApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.PushFlutterApi.onMessage', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.PushFlutterApi.onMessage was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final RemoteMessage? arg_message = (args[0] as RemoteMessage?);
          assert(arg_message != null, 'Argument for dev.flutter.pigeon.PushFlutterApi.onMessage was null, expected non-null RemoteMessage.');
          api.onMessage(arg_message!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.PushFlutterApi.onBackgroundMessage', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.PushFlutterApi.onBackgroundMessage was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final RemoteMessage? arg_message = (args[0] as RemoteMessage?);
          assert(arg_message != null, 'Argument for dev.flutter.pigeon.PushFlutterApi.onBackgroundMessage was null, expected non-null RemoteMessage.');
          api.onBackgroundMessage(arg_message!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.PushFlutterApi.onNotificationTap', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.PushFlutterApi.onNotificationTap was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Map<String?, Object?>? arg_data = (args[0] as Map<Object?, Object?>?)?.cast<String?, Object?>();
          assert(arg_data != null, 'Argument for dev.flutter.pigeon.PushFlutterApi.onNotificationTap was null, expected non-null Map<String?, Object?>.');
          api.onNotificationTap(arg_data!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.PushFlutterApi.onNewToken', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.PushFlutterApi.onNewToken was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_token = (args[0] as String?);
          assert(arg_token != null, 'Argument for dev.flutter.pigeon.PushFlutterApi.onNewToken was null, expected non-null String.');
          api.onNewToken(arg_token!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.PushFlutterApi.onOpenNotificationSettings', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          // ignore message
          api.onOpenNotificationSettings();
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.PushFlutterApi.showNotificationInForeground', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.PushFlutterApi.showNotificationInForeground was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final RemoteMessage? arg_message = (args[0] as RemoteMessage?);
          assert(arg_message != null, 'Argument for dev.flutter.pigeon.PushFlutterApi.showNotificationInForeground was null, expected non-null RemoteMessage.');
          final bool output = await api.showNotificationInForeground(arg_message!);
          return output;
        });
      }
    }
  }
}
